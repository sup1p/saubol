services:
  # Main FastAPI application
  app:
    build: .
    ports:
      - "8000:8000"
    environment:
      - LIVEKIT_URL=${LIVEKIT_URL}
      - LIVEKIT_API_KEY=${LIVEKIT_API_KEY}
      - LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DEBUG=${DEBUG:-false}
    volumes:
      # Mount source code for development (comment out for production)
      - ./src:/app/src:ro
      # Mount output directory for bidirectional sync
      - ./output:/app/output
      # Mount cache to persist downloads
      - ./cache:/app/.cache
    restart: unless-stopped
    networks:
      - app-network

  # agent:
  #   build: .
  #   command: >
  #     bash -c "uv run src/agents/transcription_agent.py download-files &&
  #             uv run src/agents/transcription_agent.py dev"
  #   environment:
  #     - LIVEKIT_URL=${LIVEKIT_URL}
  #     - LIVEKIT_API_KEY=${LIVEKIT_API_KEY}
  #     - LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET}
  #     - OPENAI_API_KEY=${OPENAI_API_KEY}
  #     - PYTHONPATH=/app
  #   volumes:
  #     - ./src:/app/src:ro
  #     # Mount output directory for bidirectional sync
  #     - ./output:/app/output
  #     # Mount medical_reports for bidirectional sync
  #     - ./medical_reports:/app/medical_reports
  #     # Mount cache to persist downloads
  #     - ./cache:/app/.cache
  #   restart: unless-stopped
  #   depends_on:
  #     - app
  #   networks:
  #     - app-network
  #   # Increase resources for model initialization
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 2G
  #       reservations:
  #         memory: 1G

networks:
  app-network:
    driver: bridge

volumes:
  redis_data: